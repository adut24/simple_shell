.TH simple_shell 1 "15 Avril 2022" "1.0" "simple_shell man page"
.SH NAME
.BR "simple_shell " "\- command interpreter (shell)"
.SH SYNOPSIS
.B #include \(dqshell.h\(dq

.BR "simple_shell " "[command_file]"
.SH DESCRIPTION
.BR "simple_shell " "is a custom command interpreter for the system."
.SS Overview
The simple_shell is a command that reads lines from either a file or the
terminal, intereprets them, and generally executes other commands. It is the
program a user could run on logging into the system. The simple_shell incorporates
many features to aid interactive use and has the advantage that the interpretative
language is common to both interactive and non-interactive use (shell scripts).
That is, commands can be typed directly to the running shell or can be
put into a file and the file can be executed directly by the shell.
.SS Invocation
If no args are present and if the standard input of the shell is connected to a
terminal, the shell is considered an interactive shell. An interactive shell
generally prompts before each command and handles programming and command errors
differently (as described below).

If command line argument \fBcommand_file\fR has been specified, then the shell treats
it as the name of a file from which to read commands (a shell script).
Otherwise, the shell reads commands from its standard input.
.SS Commands
The shell interprets the words it reads according to a language. Essentially
though, a line is read and the first word of the line is recognized as a simple
command. Otherwise, a complex command or some other special construct may have
been recognized.
.SS "Simple Commands"
If a simple command has been recognized, the words are expanded as described in
the section called \(dqExpansions\(dq, and the first remaining word is considered the
command name and the command is located. The remaining words are considered the
arguments of the command.
.SS "Search and Execution"
There are two types of commands: builtin commands, and normal programs -- and
the command is searched for (by name) in that order. They each are executed in a
different way.

Shell builtins are executed internally to the shell, without spawning a new
process.

Otherwise, the command is searched for as a normal program in the file system
(as described in the next section). The shell will interpret the program in a
subshell.
.SS "Path Search"
When locating a command, the shell first looks for a builtin command by that
name. If a builtin command is not found, one of two things happen:
.IP "1."
Command names containing a slash are simply executed without performing any
searches.
.IP "2."
The shell searches each entry in PATH in turn for the command. The value of
the PATH variable should be a series of entries separated by colons. Each entry
consists of a directory name. The current directory may be indicated implicitly
by an empty directory name, or explicitly by a single period.
.SS "White Space Splitting (Field Splitting)"
The shell treats each whitespace or tab to split the results of parameter
expansion into fields.
.SS "Builtins"
This section lists the builtin commands which are builtin because they need to
perform some operation that can't be performed by a separate process.
.TP
.B env
Prints the current environment.
.TP
.B exit [STATUS]
Terminate the shell process. If \fBSTATUS\fR is given it is used as the exit
status of the shell, otherwise the exit status of the preceding command is used.
.TP
.B setenv VARIABLE VALUE
Initialize a new environment variable, or modify an existing one.
.TP
.B unsetenv VARIABLE
Remove an environment variable
.SH "EXIT STATUS"
Errors that are detected by the shell, such as a syntax error, will cause the
shell to exit with a non-zero exit status. If the shell is not an interactive
shell, the execution of the shell file will be aborted. Otherwise the shell will
return the exit status of the last command executed, or if the exit builtin is
used with a numeric argument, it will return the argument.

.SH AUTHORS
.UR https://github.com/adut24/
Alexandre Dutertre
.UE

.UR https://github.com/Devmustroc/
Mustapha Abourar
.UE

.UR https://github.com/Pierre-Dureau/
Pierre Dureau
.UE
